{"ast":null,"code":"var _jsxFileName = \"/home/tom/Documents/ITC/01My_course/projects/react-project-2-Dybovsky/src/App.js\";\nimport React from \"react\";\nimport NewTweet from \"./components/NewTweet\";\nimport TweetsList from \"./components/TweetsList\";\nimport { callTweetList } from \"./lib/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: []\n    };\n  }\n\n  onNewTweet(tweet) {\n    this.setState(prevState => {\n      return {\n        tweets: [tweet, ...prevState.tweets]\n      };\n    });\n  } // async componentWillMount() {\n  //   const tweets = await JSON.parse(localStorage.getItem(\"myState\"));\n  //   if (localStorage.length !== 0) {\n  //     this.setState({ tweets });\n  //   } else {\n  //     this.setState({ tweets: [] });\n  //   }\n  // }\n  // componentWillUpdate(nextProps, nextState) {\n  //   localStorage.setItem(\"myState\", JSON.stringify(nextState.tweets));\n  // }\n  // async callTweetList() {\n  //   let url =\n  //     \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\";\n  //   const response = await fetch(url);\n  //   const data = await response.json();\n  //   console.log(data);\n  //   this.setState(() => ({ tweets: data }));\n  // }\n  // componentDidMount() {\n  //   this.callTweetList()\n  //   if (tweets) {\n  //   }\n  // }\n\n\n  async loadTweets() {\n    const servTweets = await callTweetList();\n    this.setState(() => ({\n      tweets: servTweets\n    }));\n  }\n\n  componentDidMount() {\n    this.loadTweets();\n  } // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.tweets.length !== this.state.tweets.length) {\n  //     localStorage.setItem(\"tweets\", JSON.stringify(this.state.tweets));\n  //   }\n  // }\n\n\n  render() {\n    const {\n      tweets\n    } = this.state; //console.log(tweets);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NewTweet, {\n        onNewTweet: tweet => {\n          this.onNewTweet(tweet);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), console.log(tweets, \"in\"), /*#__PURE__*/_jsxDEV(TweetsList, {\n        tweets: tweets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/tom/Documents/ITC/01My_course/projects/react-project-2-Dybovsky/src/App.js"],"names":["React","NewTweet","TweetsList","callTweetList","App","Component","constructor","props","state","tweets","onNewTweet","tweet","setState","prevState","loadTweets","servTweets","componentDidMount","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,aAAT,QAA8B,WAA9B;;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,SAAKC,QAAL,CAAeC,SAAD,IAAe;AAC3B,aAAO;AAAEJ,QAAAA,MAAM,EAAE,CAACE,KAAD,EAAQ,GAAGE,SAAS,CAACJ,MAArB;AAAV,OAAP;AACD,KAFD;AAGD,GAZ+B,CAchC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEgB,QAAVK,UAAU,GAAG;AACjB,UAAMC,UAAU,GAAG,MAAMZ,aAAa,EAAtC;AACA,SAAKS,QAAL,CAAc,OAAO;AAAEH,MAAAA,MAAM,EAAEM;AAAV,KAAP,CAAd;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,UAAL;AACD,GAhD+B,CAkDhC;AACA;AACA;AACA;AACA;;;AAEAG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAER,MAAAA;AAAF,QAAa,KAAKD,KAAxB,CADO,CAEP;;AAEA,wBACE;AAAA,8BACE,QAAC,QAAD;AACE,QAAA,UAAU,EAAGG,KAAD,IAAW;AACrB,eAAKD,UAAL,CAAgBC,KAAhB;AACD;AAHH;AAAA;AAAA;AAAA;AAAA,cADF,EAMGO,OAAO,CAACC,GAAR,CAAYV,MAAZ,EAAoB,IAApB,CANH,eAOE,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAvE+B;;AA0ElC,eAAeL,GAAf","sourcesContent":["import React from \"react\";\nimport NewTweet from \"./components/NewTweet\";\nimport TweetsList from \"./components/TweetsList\";\nimport { callTweetList } from \"./lib/api\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n    };\n  }\n\n  onNewTweet(tweet) {\n    this.setState((prevState) => {\n      return { tweets: [tweet, ...prevState.tweets] };\n    });\n  }\n\n  // async componentWillMount() {\n  //   const tweets = await JSON.parse(localStorage.getItem(\"myState\"));\n  //   if (localStorage.length !== 0) {\n  //     this.setState({ tweets });\n  //   } else {\n  //     this.setState({ tweets: [] });\n  //   }\n  // }\n  // componentWillUpdate(nextProps, nextState) {\n  //   localStorage.setItem(\"myState\", JSON.stringify(nextState.tweets));\n  // }\n\n  // async callTweetList() {\n  //   let url =\n  //     \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet\";\n  //   const response = await fetch(url);\n  //   const data = await response.json();\n  //   console.log(data);\n  //   this.setState(() => ({ tweets: data }));\n  // }\n\n  // componentDidMount() {\n  //   this.callTweetList()\n  //   if (tweets) {\n  //   }\n  // }\n\n  async loadTweets() {\n    const servTweets = await callTweetList();\n    this.setState(() => ({ tweets: servTweets }));\n  }\n\n  componentDidMount() {\n    this.loadTweets();\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.tweets.length !== this.state.tweets.length) {\n  //     localStorage.setItem(\"tweets\", JSON.stringify(this.state.tweets));\n  //   }\n  // }\n\n  render() {\n    const { tweets } = this.state;\n    //console.log(tweets);\n\n    return (\n      <div>\n        <NewTweet\n          onNewTweet={(tweet) => {\n            this.onNewTweet(tweet);\n          }}\n        />\n        {console.log(tweets, \"in\")}\n        <TweetsList tweets={tweets} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}