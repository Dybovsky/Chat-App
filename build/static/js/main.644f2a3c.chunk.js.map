{"version":3,"sources":["lib/api.js","components/NewTweet.jsx","components/TweetItem.jsx","components/TweetsContext.jsx","components/TweetsList.jsx","components/Loading.jsx","components/NavBar.jsx","components/Profile.jsx","App.js","reportWebVitals.js","index.js"],"names":["url","callTweetList","a","axios","get","response","data","tweets","postTweet","tweet","post","alert","message","NewTweet","props","state","content","chars","event","dateCreated","Date","preventDefault","this","newTweet","userName","localStorage","getItem","id","now","date","toISOString","onNewTweet","setState","className","onSubmit","handleSubmit","placeholder","value","onChange","target","length","disabled","isLoading","React","Component","TweetsList","TweetsContext","createContext","tweetList","useContext","map","TweetItem","loader","height","width","fill","marginLeft","marginRight","marginTop","Loading","type","color","position","style","NavBar","to","Profile","useState","name","setName","e","setItem","App","onChangeName","newName","loadTweets","setInterval","Provider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.644f2a3c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url =\n  \"https://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com\";\n\nexport async function callTweetList() {\n  const response = await axios.get(`${url}/tweet`);\n  return response.data.tweets;\n  //this.setState(() => ({ tweets: data }));\n}\n\nexport async function postTweet(tweet) {\n  try {\n    const response = await axios.post(`${url}/tweet`, tweet);\n    return response;\n  } catch (e) {\n    alert(`not today: ${e.message}`);\n  }\n}\n// const response = await axios.post(`${url}/tweet`, tweet);\n// if (response.statusCode > 200) {\n//   throw new Error(response.message);\n// }\n// }\n//   if (response.statusCode > 200) {\n//     throw new Error(\"response.data.message\");\n//   }\n// }\n","import React from 'react';\nimport { postTweet } from '../lib/api'\n\n\nclass NewTweet extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        content: ' ',\n        chars: 0,\n        \n      };\n    }\n\n   async handleSubmit(event){\n     const dateCreated = new Date()\n      event.preventDefault()\n      if(!this.state.content)\n      return;\n        let newTweet = {\n          userName: localStorage.getItem('newName') ? localStorage.getItem('newName') : 'Incognito',\n          //  this.props.newName,\n          id: Date.now(),\n         content: this.state.content,\n          date: dateCreated.toISOString(),\n          \n        \n        }\n        postTweet(newTweet)\n         this.props.onNewTweet(newTweet)\n        this.setState({content: ''})\n    }\n\n\n   \n\n\n    render(){\n        return(\n            <div\n            className='formDiv'>\n              <form \n              onSubmit={(event) => this.handleSubmit(event)}\n              className='form'\n              >\n                <textarea\n                placeholder=' What is on your mind'\n                value={this.state.content}\n                onChange={(event) => this.setState({content: event.target.value, chars: event.target.value.length })}\n                ></textarea>\n          \n                <button\n                className='tweetBtn'\n                disabled={\n                  ((this.state.chars > 140) || (this.props.isLoading)) && true\n                }\n                >Tweet</button>\n              \n              </form>\n            </div>\n        )\n    }\n\n}\n\nexport default NewTweet;\n","\nfunction TweetsList(props){\n\n    const {tweet} = props\n\n    return(<div className='tweet'>\n        <div className='title'>\n            <div className='userName'>\n                <p>{tweet.userName}</p>\n            </div>\n            <div className='createdTime'>\n                <p>{tweet.date}</p>\n            </div>\n        </div>\n        <div>\n            {tweet.content}\n        </div>\n        </div>\n    )\n}\n\nexport default TweetsList;\n","import React from 'react';\n\nconst TweetsContext = React.createContext({tweets: null})\n\nexport default TweetsContext;","\nimport React from 'react';\nimport TweetItem from './TweetItem';\nimport {useContext} from 'react'\nimport TweetsContext from './TweetsContext';\n\nfunction TweetsList(){\n\n    const tweetList = useContext(TweetsContext)\n    return(\n        <div className=\"tweets\">\n            \n            {tweetList.tweets.map(tweet => \n            <TweetItem \n            tweet={tweet}\n            key={tweet.id}\n            />\n            )}\n        </div>\n    )\n\n}\n\nexport default TweetsList;","import React from 'react';\nimport ReactLoading from 'react-loading';\n\n\nconst loader = {\n    height: '40px',\n    width: '40px',\n    fill: '#017BFF',\n    marginLeft: '45%',\n    marginRight: '45%',\n    marginTop: '20px',\n    \n}\n \nconst Loading = ({ type, color }) => (\n    \n<div>\n\n    <ReactLoading type={'spinningBubbles'} color={'#017BFF'} height={40} width={40} position={'relative'} style={loader}/> \n</div>\n        \n);\n \nexport default Loading;","import {Link} from \"react-router-dom\";\n\nconst NavBar = () => {\n    return (\n      <div className='nav'>\n        <Link \n        className='navBtn'\n        to=\"/\">Home</Link>\n        <Link\n        className='navBtn' \n        to=\"/profile\">Profile</Link>\n      </div>\n    );\n  };\n\n  export default NavBar;","import {useState} from 'react';\nconst Profile = (props) => {\n\n    const [name, setName] = useState('');\n\n    \n    const handleSubmit = (e) => {\n        localStorage.setItem('newName', name);\n        setName('')\n        // props.onChangeName(name)\n        e.preventDefault()\n    }\n    \n\n    \n    return(\n    <div className='wrapper'>\n        <h1>Profile</h1>\n        <h3>User name</h3>\n        \n    <form\n    className='formProf'\n    onSubmit={handleSubmit}>\n\n    <input type='text'\n    placeholder='Change your profile name'\n    value={name}\n    className='inp'\n    onChange={(event) => {setName(event.target.value)}}>\n    </input>\n\n    <button\n        className='saveBtn'>Save\n    </button>\n        </form>\n\n       \n        </div>)\n}\n\nexport default Profile;","import React from \"react\";\nimport NewTweet from \"./components/NewTweet\";\nimport TweetsList from \"./components/TweetsList\";\nimport { callTweetList } from \"./lib/api\";\nimport Loading from \"./components/Loading\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport Profile from \"./components/Profile\";\nimport TweetsContext from \"./components/TweetsContext\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      isLoading: false,\n      newName: \"\",\n    };\n  }\n\n  onNewTweet(tweet) {\n    this.loadTweets();\n    // this.setState((prevState) => {\n    //   return { tweets: [tweet, ...prevState.tweets] };\n    // });\n  }\n\n  onChangeName = (name) => {\n    this.setState({ newName: name });\n  };\n\n  async loadTweets() {\n    this.setState({ isLoading: true });\n    const tweets = await callTweetList();\n    this.setState({ tweets, isLoading: false });\n  }\n\n  componentDidMount() {\n    this.loadTweets();\n    setInterval(() => {\n      this.loadTweets();\n    }, 8000);\n  }\n\n  render() {\n    const { isLoading } = this.state;\n\n    return (\n      <TweetsContext.Provider value={this.state}>\n        <div>\n          <Router>\n            <NavBar></NavBar>\n            <Switch>\n              <Route exact path=\"/\">\n                <NewTweet\n                  onNewTweet={(tweet) => {\n                    this.onNewTweet(tweet);\n                  }}\n                  //isLoading={this.state.isLoading}\n                />\n\n                {isLoading ? <Loading /> : <div className=\"helper\"></div>}\n\n                <TweetsList />\n              </Route>\n              <Route path=\"/profile\">\n                <Profile />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </TweetsContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}